import os
import random
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –§–∏–∫—Ç–∏–≤–Ω—ã–π –ø–æ—Ä—Ç –¥–ª—è Render (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∞–º–∏–º –±–æ—Ç–æ–º)
PORT = int(os.environ.get("PORT", 5000))
print(f"Running on dummy port {PORT}")

# –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
messages = [
    "–¢—ã –¥–µ–ª–∞–µ—à—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ",
    "–í—Å—ë –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ",
    "–°–∫–æ—Ä–æ –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è",
    "–£ —Ç–µ–±—è —É–∂–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è",
    "–¢—ã –Ω–µ –æ–¥–Ω–∞",
    "–¢—ã —Å–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è",
    "–ü–æ–º–Ω–∏: —Ç—ã –¥–µ–ª–∞–µ—à—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ",
    "–ú–∞–ª–µ–Ω—å–∫–∏–µ –ø–æ–±–µ–¥—ã —Ç–æ–∂–µ –≤–∞–∂–Ω—ã"
]

# –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
subscribers = set()

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    subscribers.add(chat_id)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏! üíõ –¢—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥—ã–π —á–∞—Å!"
    )

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–π —á–∞—Å
async def hourly_notification(context: ContextTypes.DEFAULT_TYPE):
    for chat_id in subscribers:
        try:
            await context.bot.send_message(chat_id=chat_id, text=random.choice(messages))
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {chat_id}: {e}")

# –û—Ç–≤–µ—Ç –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
async def keyword_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    keywords = ["—É—Å—Ç–∞–ª–∞", "–ø–ª–æ—Ö–æ", "–Ω–µ –º–æ–≥—É", "—Ç—è–∂–µ–ª–æ", "—Å–ª–æ–∂–Ω–æ", "–æ–¥–∏–Ω–æ–∫", "–æ–¥–∏–Ω–æ–∫–∞—è"]
    if any(k in text for k in keywords):
        await update.message.reply_text(random.choice(messages))

def main():
    token = os.environ.get("TELEGRAM_TOKEN")
    if not token:
        raise ValueError("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω!")

    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = Application.builder().token(token).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))

    # –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), keyword_response))

    # JobQueue –¥–ª—è —á–∞—Å–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    app.job_queue.run_repeating(hourly_notification, interval=3600, first=10)  # –ø–µ—Ä–≤—ã–π —Ä–∞–∑ —á–µ—Ä–µ–∑ 10 —Å–µ–∫

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –±–µ–∑ asyncio.run() ‚Äî –∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è Render
    app.run_polling()

if __name__ == "__main__":
    main()
